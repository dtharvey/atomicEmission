source('~/Box Sync/p-harvey/Teaching/R-Project/reaction_energy_diagrams/Reaction-Energy-Diagrams/rxnED.R', echo=TRUE)
conc_hcl = seq(0.1, 0.5, 0.05)
id = seq(1, 9, 1)
pick_id = sample(id, 1)
vol_hcl = runif(1, min = 12, max = 18)
mass_carbonate = conc_hcl[pick_id] * vol_hcl * 105.988 / 2000 + runif(1, -0.001, +0.001)
conc_hcl = seq(0.1, 0.5, 0.05)
id = seq(1, 9, 1)
pick_id = sample(id, 1)
vol_hcl = runif(1, min = 12, max = 18)
mass_carbonate = conc_hcl[pick_id] * vol_hcl * 105.988 / 2000 + runif(1, -0.001, +0.001)
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (d * 10^(a-b) - c)/(1 + 10^(a-b))
x
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (d * 10^(a-b) + c)/(1 + 10^(a-b))
x
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 8.60
b = 8.60
c = 0.47
d = 0.33
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 10.30
b = 10.35
c = 0.48
d = 0.35
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 7.48
b = 7.25
c = 0.52
d = 0.21
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 8.07
b = 8.10
c = 0.51
d = 0.25
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.89
b = 3.80
c = 0.59
d = 0.30
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 9.43
b = 9.50
c = 0.59
d = 0.24
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 7.39
b = 7.35
c = 0.57
d = 0.35
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 7.64
b = 7.60
c = 0.59
d = 0.23
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 5.30
b = 5.40
c = 0.46
d = 0.22
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.79
b = 4.30
c = 0.41
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 5.03
b = 5.05
c = 0.60
d = 0..37
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 5.03
b = 5.05
c = 0.60
d = 0.37
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.64
b = 3.95
c = 0.45
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.64
b = 3.95
c = 0.45
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.64
b = 3.95
c = 0.45
d = 0.27
x = (d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 3.64
b = 3.95
c = 0.45
d = 0.27
x = (-d * 10^(a-b) + c)/(1 - 10^(a-b))
x
id = (x * 1000)/4
id
a = 3.64
b = 3.95
c = 0.45
d = 0.27
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
a = 10.3
b = 10.35
c = 0.48
d = 0.35
x = (-d * 10^(a-b) + c)/(1 + 10^(a-b))
x
id = (x * 1000)/4
id
x = (-d * exp(a-b) + c)/(1 + exp(a-b))
x
sprintf(%e, pi)
sprintf("%e", pi)
sprintf("%.3f", pi)
sprintf("%.3e", pi)
source(file = "pesFunctions.R")
source('~/Box Sync/p-harvey/Teaching/Chem 130/Current Class Materials/Class Notes/Unit 1/Day_06/pesFunctions.R', echo=TRUE)
source(file = "pesFunctions.R")
K = simulatePES(19)
plotPES(K, y.lim = 6)
source(file = "pesFunctions.R")
K = simulatePES(19)
old.par = par(mfrow = c(1,2))
plotPES(K, y.lim = 6)
plotPES(K, xlowlim = 0, xuplim = 50, y.lim = 6)
par(old.par)
source(file = "pesFunctions.R")
K = simulatePES(19)
old.par = par(mfrow = c(1,2))
plotPES(K, y.lim = 6)
plotPES(K, xlowlim = 0, xuplim = 40, y.lim = 6)
par(old.par)
Sc = simulatePES(21)
old.par = par(mfrow = c(1,2))
plotPES(K, y.lim = 6)
plotPES(K, xlowlim = 0, xuplim = 40, y.lim = 6)
par(old.par)
Sc = simulatePES(21)
old.par = par(mfrow = c(1,2))
plotPES(Sc, y.lim = 6)
plotPES(Sc)
par(old.par)
Sc = simulatePES(21)
old.par = par(mfrow = c(1,2))
plotPES(Sc, y.lim = 6)
plotPES(Sc, xlowlim = 0, xuplim = 50, y.lim = 6 )
par(old.par)
Sc = simulatePES(21)
old.par = par(mfrow = c(1,2))
plotPES(Sc, y.lim = 6)
plotPES(Sc, xlowlim = 0, xuplim = 10, y.lim = 6 )
par(old.par)
source(file = "pesFunctions.R")
Sc = simulatePES(21)
old.par = par(mfrow = c(2,1))
plotPES(Sc, y.lim = 6)
plotPES(Sc, xlowlim = 0, xuplim = 50, y.lim = 6)
par(old.par)
source(file = "pesFunctions.R")
Sc = simulatePES(21)
old.par = par(mfrow = c(2,1))
plotPES(Sc, y.lim = 6)
plotPES(Sc, xlowlim = 0, xuplim = 50, y.lim = 6)
par(old.par)
r = seq(0, 30, 0.01)
pdf3s = mult * rdf3s^2
mult = 4 * pi * r^2
rdf3s = (9 * sqrt(3))^-1 * (6 - 4*r + (2*r/3)^2) * exp(-r/3)
pdf3p = mult * rdf3p^2
pdf3s = mult * rdf3s^2
rdf3p = (9 * sqrt(6))^-1 * (4 - 2 * r/3) * (2 * r/3) * exp(-r/3)
pdf3p = mult * rdf3p^2
head(r)
head(pdf3s)
lines(r, pdf3s, lwd = 2, lty = 3)
plot(r, pdf1s, lwd = 2, type = "l", lty = 1, xlab = "distance from nucleus in a.u.", ylab = "radial probability")
m = r * pdf3s
sum(m)/length(m)
m1 = r * pdf3p
sum(m1)/length(m1)
setwd("~/Box Sync/p-harvey/Teaching/Chem 130/Current Class Materials/TakeHomes/TH_02")
for (i in 1:24) {
rmarkdown::render(input = "TH02.Rmd", output_file = paste0("TH02_", i, ".pdf"))
}
setwd("~/Box Sync/p-harvey/Teaching/Chem 130/Current Class Materials/TakeHomes/TH_03")
for (i in 1:24) {
rmarkdown::render(input = "TH03.Rmd", output_file = paste0("TH03_", i, ".pdf"))
}
setwd("~/Box Sync/p-harvey/Teaching/Chem 260/Current Class Materials/Take-Home Assignments/TH_02")
for (i in 1:24) {
rmarkdown::render(input = "TH02.Rmd", output_file = paste0("TH02_", i, ".pdf"))
}
setwd("~/Box Sync/p-harvey/Teaching/Chem 260/Current Class Materials/Take-Home Assignments/TH_03")
for (i in 1:24) {
rmarkdown::render(input = "TH03.Rmd", output_file = paste0("TH03_", i, ".pdf"))
}
for (i in 1:24) {
rmarkdown::render(input = "TH03.Rmd", output_file = paste0("TH03_", i, ".pdf"))
}
shiny::runApp('~/Box Sync/p-harvey/Teaching/R-Project/thermBoxes')
rxnED = function(deltaH = c(100,-150),
ea = c(120, 200),
energies = NULL,
show_deltaH = TRUE,
show_ea = TRUE) {
# attach the bezier package
library(bezier)
# if energies is NULL, then use deltaH and ea to calculate energies
# otherwise, use energies and ignore deltaH and ea
if (is.null(energies) == TRUE) {
# create object to store energies
energies = rep(0, 2 * length(deltaH) + 1)
# set initial energy to zero
energies[1] = 0
# index for intermediates and final product are odd numbers
# loop uses deltaH values to calculate energies
id = seq(3, length(energies), 2)
count = 0
for (i in id) {
count = count + 1
energies[i] = energies[i - 2] + deltaH[count]
}
# index for barriers are even numbers
# loop uses ea values to calculate energy barriers
id = seq(2, length(energies), 2)
count = 0
count = count + 1
for (i in id) {
energies[i] = energies[i - 1] + ea[count]
}
# energies rescaled so minimum is zero for ease in plotting
energies = energies - min(energies)
}
# determine number of segments to draw
segs = length(energies) - 1
# set x values so that segments are equally spaced
# substitute y for energies to make coding easier
x = seq(from = 0, to = 1, by = 1/segs)
y = energies
# set-up axes without plotting points
plot(x, y, type = "n", ylim = c(0, max(y)),
ylab = "energy (kJ/mol)", yaxt = "n",
xlab = "reaction coordinate", xaxt = "n",
xlim = c(-0.1, 1.1))
# add scale marker equivalent to 50 kJ/mol
# energy_scale = abs(y[2] - y[1])
segments(-0.05, 0, -0.05, 50, lty = 1, lwd = 4, col = "black")
# plot energy diagram using bezier function from bezier package
# for each segment, bezx takes start and end points from energies
# and adds midpoint between the two, and bezy uses energy for
# start and end points; with four points per segment, bezier fits
# uses a cubic bezier curve
for (i in 1:segs) {
bezx = c(x[i], x[i] + 0.5/segs, x[i] + 0.5/segs, x[i + 1])
bezy = c(y[i], y[i], y[i + 1], y[i + 1])
lines(bezier(t = seq(0, 1, length = 100), p = list(bezx, bezy)),
lwd = 3, col = "blue")
}
# plot horizontal lines to mark all minima and maxima
for (i in seq(1, length(y), 1)) {
if (i == 1) {
segments(x[i], y[i], x[i] + 1/segs, y[i],
lty = 3, lwd = 2, col = "black")
} else if (i == (length(y))) {
segments(x[i] - 1/segs, y[i], x[i], y[i],
lty = 3, lwd = 2, col = "black")
} else {
segments(x[i] - 1/segs, y[i], x[i] + 1/segs, y[i],
lty = 3, lwd = 2, col = "black")
}
# add a horizontal line showing minimum energy
abline(h = min(y), lty = 3, col = "black")
# add arrows showing change in enthalpy for each step
if (show_deltaH == TRUE) {
for (i in seq(1, segs, 2)) {
arrows(x[i + 1], y[i], x[i + 1], y[i + 2],
length = 0.1, angle = 15, lwd = 2, col = "red")
}
# add arrows showing activation energies for each step
if (show_ea == TRUE) {
for (i in seq(1, segs, 2)) {
arrows(x[i], y[i], x[i], y[i + 1],
length = 0.1, angle = 15, lwd = 2, col = "green")
}
old.par = par(mfrow = c(2,2))
rxnED(deltaH = c(100,-150), ea = c(120, 200), energies = NULL)
rxnED(energies = c(50, 170, 150, 270, 0), show_deltaH = F)
rxnED(energies = c(50, 170, 150, 270, 0), show_ea = F)
rxnED(energies = c(100, 200, 50, 300, 150, 200, 0, 75, 25))
par(old.par)
